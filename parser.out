Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> hash_table
Rule 2     program -> program NEWLINE
Rule 3     hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE hash_entries RBRACE SEMICOLON
Rule 4     hash_entries -> hash_entry COMMA hash_entry
Rule 5     hash_entries -> hash_entries NEWLINE
Rule 6     hash_entry -> IDENTIFIER EQUALS STRING
Rule 7     hash_entry -> IDENTIFIER

Terminals, with rules where they appear

AT                   : 3
COMMA                : 4
DOLLAR_SIGN          : 3
EQUALS               : 3 6
IDENTIFIER           : 3 6 7
LBRACE               : 3
NEWLINE              : 2 5
RBRACE               : 3
SEMICOLON            : 3
STRING               : 6
error                : 

Nonterminals, with rules where they appear

hash_entries         : 3 5
hash_entry           : 4 4
hash_table           : 1
program              : 2 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . hash_table
    (2) program -> . program NEWLINE
    (3) hash_table -> . DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE hash_entries RBRACE SEMICOLON

    DOLLAR_SIGN     shift and go to state 3

    program                        shift and go to state 1
    hash_table                     shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . NEWLINE

    NEWLINE         shift and go to state 4


state 2

    (1) program -> hash_table .

    NEWLINE         reduce using rule 1 (program -> hash_table .)
    $end            reduce using rule 1 (program -> hash_table .)


state 3

    (3) hash_table -> DOLLAR_SIGN . IDENTIFIER EQUALS AT LBRACE hash_entries RBRACE SEMICOLON

    IDENTIFIER      shift and go to state 5


state 4

    (2) program -> program NEWLINE .

    NEWLINE         reduce using rule 2 (program -> program NEWLINE .)
    $end            reduce using rule 2 (program -> program NEWLINE .)


state 5

    (3) hash_table -> DOLLAR_SIGN IDENTIFIER . EQUALS AT LBRACE hash_entries RBRACE SEMICOLON

    EQUALS          shift and go to state 6


state 6

    (3) hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS . AT LBRACE hash_entries RBRACE SEMICOLON

    AT              shift and go to state 7


state 7

    (3) hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT . LBRACE hash_entries RBRACE SEMICOLON

    LBRACE          shift and go to state 8


state 8

    (3) hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE . hash_entries RBRACE SEMICOLON
    (4) hash_entries -> . hash_entry COMMA hash_entry
    (5) hash_entries -> . hash_entries NEWLINE
    (6) hash_entry -> . IDENTIFIER EQUALS STRING
    (7) hash_entry -> . IDENTIFIER

    IDENTIFIER      shift and go to state 9

    hash_entries                   shift and go to state 10
    hash_entry                     shift and go to state 11

state 9

    (6) hash_entry -> IDENTIFIER . EQUALS STRING
    (7) hash_entry -> IDENTIFIER .

    EQUALS          shift and go to state 12
    COMMA           reduce using rule 7 (hash_entry -> IDENTIFIER .)
    RBRACE          reduce using rule 7 (hash_entry -> IDENTIFIER .)
    NEWLINE         reduce using rule 7 (hash_entry -> IDENTIFIER .)


state 10

    (3) hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE hash_entries . RBRACE SEMICOLON
    (5) hash_entries -> hash_entries . NEWLINE

    RBRACE          shift and go to state 13
    NEWLINE         shift and go to state 14


state 11

    (4) hash_entries -> hash_entry . COMMA hash_entry

    COMMA           shift and go to state 15


state 12

    (6) hash_entry -> IDENTIFIER EQUALS . STRING

    STRING          shift and go to state 16


state 13

    (3) hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE hash_entries RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 17


state 14

    (5) hash_entries -> hash_entries NEWLINE .

    RBRACE          reduce using rule 5 (hash_entries -> hash_entries NEWLINE .)
    NEWLINE         reduce using rule 5 (hash_entries -> hash_entries NEWLINE .)


state 15

    (4) hash_entries -> hash_entry COMMA . hash_entry
    (6) hash_entry -> . IDENTIFIER EQUALS STRING
    (7) hash_entry -> . IDENTIFIER

    IDENTIFIER      shift and go to state 9

    hash_entry                     shift and go to state 18

state 16

    (6) hash_entry -> IDENTIFIER EQUALS STRING .

    COMMA           reduce using rule 6 (hash_entry -> IDENTIFIER EQUALS STRING .)
    RBRACE          reduce using rule 6 (hash_entry -> IDENTIFIER EQUALS STRING .)
    NEWLINE         reduce using rule 6 (hash_entry -> IDENTIFIER EQUALS STRING .)


state 17

    (3) hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE hash_entries RBRACE SEMICOLON .

    NEWLINE         reduce using rule 3 (hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE hash_entries RBRACE SEMICOLON .)
    $end            reduce using rule 3 (hash_table -> DOLLAR_SIGN IDENTIFIER EQUALS AT LBRACE hash_entries RBRACE SEMICOLON .)


state 18

    (4) hash_entries -> hash_entry COMMA hash_entry .

    RBRACE          reduce using rule 4 (hash_entries -> hash_entry COMMA hash_entry .)
    NEWLINE         reduce using rule 4 (hash_entries -> hash_entry COMMA hash_entry .)

